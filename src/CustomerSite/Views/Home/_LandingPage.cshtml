@*@using Microsoft.Marketplace.SaasKit.Models*@

@using Marketplace.SaaS.Accelerator.Services.Models
@model Marketplace.SaaS.Accelerator.Services.Models.SubscriptionResultExtension

@{
    ViewData["Title"] = "Home";
}
@if (!Model.ShowWelcomeScreen)
{
    <div class="container" id="divHome">
        <form method="post" id="frmIndex">

            <div class="text-white mt20">
                <span class="cm-section-heading">Subscription Details</span>
            </div>
            @if (Model != null && !string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Some Error Occurred During Operation!
                </div>
            }
            else
            {
                <div class="cm-panel-default mt20">
                    <dl class="row text-left">
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Customer Email")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.CustomerEmailAddress)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Customer Name ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.CustomerName)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("ID ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.Id)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Name ")
                        </dt>
                        <dd class="col-sm-9 p-2">
                            @Html.DisplayFor(model => model.Name)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Status ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.SubscriptionStatus)
                        </dd>
                        @* ReSharper disable once ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator *@
                        @foreach (DownloadItem item in Model.DownloadItems)
                        {
                            if (Model.SubscriptionStatus != SubscriptionStatusEnumExtension.Subscribed)
                            {
                                continue;
                            }

                            <dt class="col-sm-3 p-2 p10">
                                @Html.DisplayFor(model => item.Name)
                            </dt>
                            <dd class="col-sm-9 p-2 p10">
                                <a href="@item.SasUrl" target="_blank" rel="noopener noreferrer">Download</a>
                            </dd>
                        }
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Offer Name ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.OfferId)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Plan ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.PlanId)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Purchaser Email ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.Purchaser.EmailId)
                            @Html.HiddenFor(model => model.Purchaser.EmailId)
                        </dd>

                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Azure Tenant ID ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.Purchaser.TenantId)
                            @Html.HiddenFor(model => model.Purchaser.TenantId)
                        </dd>

                        @if (Model.SubscriptionParameters != null && Model.SubscriptionParameters.Count() > 0)
                        {

                            for (int i = 0; i < Model.SubscriptionParameters.Count(); i++)
                            {
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Id)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanAttributeId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].ValueType)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].OfferId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].SubscriptionId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].DisplayName)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Type)

                                if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName, new { required = "required", @class = @Model.SubscriptionParameters[i].Type })
                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                        {<span class="red-star @Model.SubscriptionParameters[i].Type">*</span>}


                                    </dt>
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName)
                                        </dt>
                                    }
                                }

                                @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    @if (Model.SubscriptionParameters[i].FromList == true)
                                    {
                                        var data = Model.SubscriptionParameters[i].ValuesList;
                                        var selectList = new SelectList(data.Split(','));


                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }
                                            else
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }

                                        </dd>

                                    }
                                    else if (Model.SubscriptionParameters[i].Htmltype == "date")
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                    else
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dd class="col-sm-9 p-2 p10  @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].Value)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Value)
                                        </dd>
                                    }
                                }
                            }

                        }

                    </dl>
                </div>
                <div class="text-end">
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.Subscribed)
                    {
                        <button type="submit" asp-action="SubscriptionOperation" asp-route-subscriptionId="@Model.Id" asp-route-planId="@Model.PlanId" asp-route-operation="Manage" class="cm-button-default text-right">Manage</button>
                        <button type="submit" asp-action="Subscriptions" class="cm-button-default text-end">Go to Subscription List</button>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == true)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end">Activate</a>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == false)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end" style="text-decoration:none;">Subscribe</a>
                    }
                </div>
            }
        </form>
    </div>
}
else
{
    <div class="container text-center my-5">
        <h1 class="display-4 fw-bold" style="color: #1b6ec2">Welcome to Raft WSL Enterprise</h1>
        <p class="lead mt-3 text-secondary">
            Here you can view your active subscriptions and download the installers for the applications included in your license.
        </p>

        <div class="mt-4 d-grid gap-3 d-sm-flex justify-content-sm-center">
            @if (User.Identity is { IsAuthenticated: true })
            {
                <a asp-action="Subscriptions" class="btn btn-outline-primary btn-lg px-5 py-3 cm-button-default">
                    Go to Subscription List
                </a>
            }
            else
            {
                <a asp-controller="Account" asp-action="SignIn" class="btn btn-primary btn-lg px-5 py-3 cm-button-default">
                    Sign In to Continue
                </a>
            }
        </div>
    </div>
}
<script type="text/javascript">

    function SubscriptionOperation(subscriptionId, planId, operation) {
        if (validate()) {
            var formobject = $('#frmIndex').serialize();
            var csrftoken = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '/Home/SubscriptionOperation',
                type: 'POST',
                headers: { RequestVerificationToken: csrftoken },
                data: formobject + "&subscriptionId=" + subscriptionId + "&planId=" + planId + "&operation=" + operation,
                cache: false,
                success: function (result) {
                    $('#divIndex').html(result);
                },
                Error:
                    function (result) {
                        $('#divIndex').html(result);
                    }
            });
        }
        else {
            swal({
                title: "Required",
                text: "Please fill all required values",
                icon: "warning"
            })

        }
    }


    function validate() {
        var valid = true;
        $(':input[required]:visible').each(function () {
            if ($(this).val() == "") //check loginc here
                return valid = false;
        });
        return valid;
    }
</script>