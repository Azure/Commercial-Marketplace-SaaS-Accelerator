@*@using Microsoft.Marketplace.SaasKit.Models*@

@using Marketplace.SaaS.Accelerator.Services.Models
@model Marketplace.SaaS.Accelerator.Services.Models.SubscriptionResultExtension

@{
    ViewData["Title"] = "Home";
}
@if (!Model.ShowWelcomeScreen)
{
    <div class="container" id="divHome">
        <form method="post" id="frmIndex">

            <div class="text-white mt20">
                <span class="cm-section-heading">You are almost there!! We just need a few additional details to get you started.</span>
            </div>
            @if (Model != null && !string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Ooops, something went wrong. Please try again a later, say maybe 15 mins? We'll send you an email once we're back up.
                </div>
            }
            else
            {
                <div class="cm-panel-default mt20">
                    <dl class="row text-left">

                        <dt class="col-sm-2 p-2 p10">
                            @Html.DisplayName("You have selected the: ")
                        </dt>
                        @{
                            string displayName = Model.PlanId switch
                            {
                                "a9459739-78ad-4f3d-924d-c7807de422cb" => "Starter Plan",
                                "694a4c21-bb0d-4651-91bc-dc91da6208bc" => "Team Plan",
                                "03fc223e-75df-4329-82ff-cdd8befe01d1" => "Business Plan",
                                "1e2f32ef-10c4-4038-b938-f155b92b8f21" => "Enterprise Plan",
                                _ => "Unknown Plan"
                            };
                        }
                        <dd class="col-sm-4 p-2 p10">
                            @Html.DisplayName(displayName)
                        </dd>

                        <dt class="col-sm-2 p-2 p10">
                            @Html.DisplayName("Pricing Term")
                        </dt>
                        @if (Model.Term.TermUnit == TermUnitEnum.P1M)
                        {
                        <dd class="col-sm-4 p-2 p10">
                            @Html.DisplayName("Monthly")
                            </dd>
                        }
                        else
                        {
                        <dd class="col-sm-4 p-2 p10">
                            @Html.DisplayName("Yearly")
                            </dd>
                        }

                        <dt class="col-sm-12 p-2 p10">
                            @Html.DisplayName("Plan Details")
                            </dt>
                        <dd class="col-sm-12 p-2 p10">
                            @Html.DisplayName("Plan Description, numbers and total price")
                            </dd>

                        <dt class="col-sm-4 p-2 p10">
                            @Html.DisplayName("Have a Promo Code?")
                        </dt>
                        <dd class="col-sm-8 text-input-bar">
                            @Html.TextBoxFor(model => model.PromoCodeId, new { @class = "text-input-bar", @id = "promoCodeId" })
                            <button type="button" onclick="validatePromoCode()" class="cm-button-default text-end">Validate Promo Code</button>
                            </dd>
                        <dd class="col-sm-4 p-2 p10">
                            <div id="promoMessage"></div>
                        </dd>

                        <div class="text-white mt20">
                            <span class="cm-section-subheading">Configuration Details</span>
                            <p class="text-black p-2 p10">To complete the activation of your Botsa Azure Marketplace subscriptions, please provide us with the following configuration details:</p>
                        </div>
                       
                        @if (Model.SubscriptionParameters != null && Model.SubscriptionParameters.Count() > 0)
                        {

                            for (int i = 0; i < Model.SubscriptionParameters.Count(); i++)
                            {
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Id)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanAttributeId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].ValueType)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].OfferId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].SubscriptionId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].DisplayName)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Type)

                                if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName, new { required = "required", @class = @Model.SubscriptionParameters[i].Type })
                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                        {
                                            <span class="red-star @Model.SubscriptionParameters[i].Type">*</span>
                                        }


                                    </dt>
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName)
                                        </dt>
                                    }
                                }

                                @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    @if (Model.SubscriptionParameters[i].FromList == true)
                                    {
                                        var data = Model.SubscriptionParameters[i].ValuesList;
                                        var selectList = new SelectList(data.Split(','));


                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }
                                            else
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }

                                        </dd>

                                    }
                                    else if (Model.SubscriptionParameters[i].Htmltype == "date")
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                    else
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dd class="col-sm-9 p-2 p10  @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].Value)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Value)
                                        </dd>
                                    }
                                }
                            }

                        }

                    </dl>
                </div>
                <div class="text-end">
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.Subscribed)
                    {
                        <button type="submit" asp-action="SubscriptionOperation" asp-route-subscriptionId="@Model.Id" asp-route-planId="@Model.PlanId" asp-route-operation="Deactivate" class="cm-button-danger text-right">Unsubscribe</button>
                        <button type="submit" asp-action="Subscriptions" class="cm-button-default text-end">Go to Subscription List</button>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == true)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end">Activate</a>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == false)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end" style="text-decoration:none;">Subscribe</a>
                    }
                </div>
            }
        </form>
    </div>
}
else
{
    <div class="pt-5">
        <div class="card p-3">
            <div class="row">
            <div class="col-md-6">
                <p>
                    Hello 1
                 </p>
            </div>
            <div class="col-md-6">
                <p>
                    Hello 2
                </p>
            </div>
                <div class="downloadcard">
                    <span class="title">Download our mobile application.</span>
                </div>
            </div>
        </div>
    </div>
}
<div id="loader" class="loader-circle-9" style="display: none;"></div>
<script type="text/javascript">
    function validatePromoCode() {
        console.log("validatePromoCode function called");
        var promoCodeElement = document.getElementById('promoCodeId');
        if (promoCodeElement === null) {
            console.error("promoCode element not found");
            return;
        }
        var promoCode = promoCodeElement.value;
        console.log("Promo Code:", promoCode);
        var promoMessage = document.getElementById('promoMessage');
        var loader = document.getElementById('loader');

        promoMessage.innerText = '';
        loader.style.display = 'block';

        fetch('/Home/ValidatePromoCode', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ PromoCodeId: promoCode }) // Ensure the key matches the server-side model
        })
            .then(response => {
                console.log("Response received");
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                console.log("Data received:", data);
                promoMessage.innerText = data.message;
                loader.style.display = 'none';
            })
            .catch(error => {
                console.error('Error:', error);
                promoMessage.innerText = 'An error occurred. Please try again.';
                loader.style.display = 'none';
            });
    }

    function SubscriptionOperation(subscriptionId, planId, operation) {
        if (validate()) {
            var formobject = $('#frmIndex').serialize();
            var csrftoken = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '/Home/SubscriptionOperation',
                type: 'POST',
                headers: { RequestVerificationToken: csrftoken },
                data: formobject + "&subscriptionId=" + subscriptionId + "&planId=" + planId + "&operation=" + operation,
                cache: false,
                success: function (result) {
                    $('#divIndex').html(result);
                },
                Error:
                    function (result) {
                        $('#divIndex').html(result);
                    }
            });
        }
        else {
            swal({
                title: "Required",
                text: "Please fill all required values",
                icon: "warning"
            })

        }
    }


    function validate() {
        var valid = true;
        $(':input[required]:visible').each(function () {
            if ($(this).val() == "") //check loginc here
                return valid = false;
        });
        return valid;
    }
</script>