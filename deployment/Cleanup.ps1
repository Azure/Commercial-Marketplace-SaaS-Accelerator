# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See LICENSE file in the project root for license information.

#
# Powershell script to cleanup the resources in case of failed deployment
#

#.\CleanUp.ps1 `
# -WebAppNamePrefix "amp_saas_accelerator_<unique>" `
# -ResourceGroupForDeployment "amp_saas_accelerator_<unique>"

Param(  
   [string][Parameter(Mandatory)]$WebAppNamePrefix, # Prefix used for creating web applications
   [string][Parameter()]$ResourceGroupForDeployment, # Name of the resource group to deploy the resources
   [string][Parameter()]$TenantID, # The value should match the value provided for Active Directory TenantID in the Technical Configuration of the Transactable Offer in Partner Center
   [string][Parameter()]$AzureSubscriptionID, # Subscription where the resources be deployed
   [switch][Parameter()]$ConfirmAll
)

function ConfirmUser {
    param($message)
    # Display the message in yellow
	Write-Host $message -ForegroundColor Yellow -NoNewLine

	# Prompt the user for input
	$response = Read-Host

	# Check the user's response
	if ($response -eq 'Y' -or $response -eq 'y') {
		return $true
	}
	
	return $false
}

$ErrorActionPreference = "Stop"
$startTime = Get-Date

#region Select Tenant / Subscription for deployment

$currentContext = az account show | ConvertFrom-Json
if ($TenantID -eq ""){
	$TenantID = $currentContext.tenantId 
}
if ($AzureSubscriptionID -eq ""){
	$AzureSubscriptionID = $currentContext.id
}
if ($AzureSubscriptionID -ne $currentContext.id) {
	az account set -s $AzureSubscriptionID
}

#endregion

#region Set up Variables and Default Parameters

if ($ResourceGroupForDeployment -eq "") {
    $ResourceGroupForDeployment = $WebAppNamePrefix 
}

#Note - we only delete / purge KV if it was autogenerated by the sytem - If you bring your own kv we will never delete it.
$KeyVault=$WebAppNamePrefix+"-kv" 
$FullfilmentAppRegName = $WebAppNamePrefix+"-FulfillmentAppReg"
$LoginPortalAppRegName = $WebAppNamePrefix+"-LandingpageAppReg"
$LoginAdminAppRegName = $WebAppNamePrefix+"-AdminPortalAppReg"

#endregion

#region Display variables

Write-Host "🔑Azure Subscription: '$AzureSubscriptionID'"
Write-Host "🔑Resource Group: '$ResourceGroupForDeployment'"
Write-Host "🔑Key Vault: '$KeyVault'"
Write-Host "🔑Fullfilment AppReg Name: '$FullfilmentAppRegName'"
Write-Host "🔑Login Portal AppReg Name: '$LoginPortalAppRegName'"
Write-Host "🔑Login Admin AppReg Name: '$LoginAdminAppRegName'"

#endregion

#region clean up App registrations (could be more than one if you ran the script multiple times

#Note - we only clean up and delete app registrations if they were auto-created with the deploy script. - If you bring your own app regs we will never delete them.
$FullfilmentAppRegIds = az ad app list --display-name $FullfilmentAppRegName --query "[].appId" --output tsv
Write-Host "Deleting App Registration '$FullfilmentAppRegName'";
if ($ConfirmAll -eq $true -or (ConfirmUser -message 'Delete (y/n)?') -eq $true){
	foreach($id in $FullfilmentAppRegIds){
		az ad app delete --id $id
	}
}


$LoginPortalAppRegIds = az ad app list --display-name $LoginPortalAppRegName --query "[].appId" --output tsv
Write-Host "Deleting App Registration '$LoginPortalAppRegName'";
if ($ConfirmAll -eq $true -or (ConfirmUser -message 'Delete (y/n)?') -eq $true){
	foreach($id in $LoginPortalAppRegIds){
		az ad app delete --id $id
	}
}


$LoginAdminAppRegIds  = az ad app list --display-name $LoginAdminAppRegName --query "[].appId" --output tsv
Write-Host "Deleting App Registration '$LoginAdminAppRegName'";
if ($ConfirmAll -eq $true -or (ConfirmUser -message 'Delete (y/n)?') -eq $true){
	foreach($id in $LoginAdminAppRegIds){
		az ad app delete --id $id
	}
}

#endregion

Write-Host "Deleting Resource Group '$ResourceGroupForDeployment'";
if ($ConfirmAll -eq $true -or (ConfirmUser -message 'Delete (y/n)?') -eq $true){
	az group delete -g $ResourceGroupForDeployment --yes
}

Write-Host "Purging KeyVault '$KeyVault'";
if ($ConfirmAll -eq $true -or (ConfirmUser -message 'Delete (y/n)?') -eq $true){
	az keyvault purge --name $KeyVault
}

